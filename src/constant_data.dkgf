Set BASE Noun set_Noun
Type BASE Noun type_Noun
Prop BASE Noun proposition_Noun
false BASE Name absurdity_Name
Num BASE Noun number_Noun
bool BASE Noun boolean_Noun
List BASE Fam list_Fam
Dig BASE Noun digit_Noun
Nat BASE Set natural_Set
Int BASE Set integer_Set
Rat BASE Set rational_Set
Real BASE Set real_Set
Complex BASE Set complex_Set
Eq BASE Compar Eq_Compar
Lt BASE Compar Lt_Compar
Gt BASE Compar Gt_Compar
Neq BASE Compar Neq_Compar
Leq BASE Compar Leq_Compar
Geq BASE Compar Geq_Compar
positive BASE Adj positive_Adj
negative BASE Adj negative_Adj
plus BASE Oper plus_Oper
minus BASE Oper minus_Oper
times BASE Oper times_Oper
div BASE Oper div_Oper
pow BASE Oper pow_Oper
neg BASE Oper neg_Oper
log BASE Oper logarithm_Oper
sqrt BASE Oper square_root_Oper
succ BASE Fun successor_Fun
abs BASE Fun absolute_value_Fun
factorial BASE Oper factorial_Oper
gcd BASE Fun gcd_Fun
even BASE Adj even_Adj
odd BASE Adj odd_Adj
prime BASE Adj prime_Adj
divisible BASE Reladj divisible_Reladj
divide BASE Relverb divide_Relverb
divisor BASE Relnoun divisor_Relnoun
converge BASE Verb converge_Verb
function BASE Fam function_Fam
union BASE Oper union_Oper
intersection BASE Oper intersection_Oper
difference BASE Oper difference_Oper
cartesian BASE Oper difference_Oper
powerset BASE Oper powerset_Oper
complement BASE Oper complement_Oper
subset BASE Comparnoun subset_Comparnoun
subseteq BASE Comparnoun subseteq_Comparnoun
superset BASE Comparnoun superset_Comparnoun
superseteq BASE Comparnoun superset_Comparnoun
equalset BASE Compar equalset_Compar
notequalset BASE Compar notequalset_Compar
element BASE Comparnoun element_Comparnoun
notelement BASE Comparnoun notelement_Comparnoun
emptyset BASE Const emptyset_Const
universeset BASE Const universeset_Const

nat ALIAS matita Nat
Type0 ALIAS matita Set
prop ALIAS matita Prop
And ALIAS matita and
Not ALIAS matita not
eq ALIAS matita Eq 1 2
le ALIAS matita Leq
lt ALIAS matita Lt
ge ALIAS matita Geq
gt ALIAS matita Gt
Or ALIAS matita or
O ALIAS matita 0
S ALIAS matita succ
fact ALIAS matita factorial
exp ALIAS matita pow
list ALIAS matita List
mem ALIAS matita member 1 2
Term ALIAS matita Elem 1
lift COERCION matita
Univ COERCION matita

rational NEW top100 Adj rational_Adj
irrational NEW top100 Adj irrational_Adj
Polynomial NEW top100 Noun polynomial_Noun
degree NEW top100 Fun degree_Fun
isRoot NEW top100 Relnoun is_root_Relnoun
cardinality NEW top100 Fun cardinality_Fun
denumerable NEW top100 Adj denumerable_Adj
Vector NEW top100 Noun vector_Noun
length NEW top100 Oper length_Oper
perpendicular NEW top100 Compar perpendicular_Compar
resultant NEW top100 Oper resultant_Oper
square NEW top100 Oper square_Oper
legendre NEW top100 Oper legendre_symbol_Oper

#LIN Eng rational_Adj = mkAdj "rational"
#LIN Fre rational_Adj = mkAdj "rationnel"
#LIN Swe rational_Adj = mkAdj "rationell"

#LIN Eng irrational_Adj = mkAdj "irrational"
#LIN Fre irrational_Adj = mkAdj "irrationnel"
#LIN Swe irrational_Adj = mkAdj "irrationell"

#LIN Eng polynomial_Noun = mkNoun "polynomial"
#LIN Fre polynomial_Noun = mkNoun (mkN "polynôme" masculine)
#LIN Swe polynomial_Noun = mkNoun (mkN "polynom" "polynom")

#LIN Eng degree_Fun = mkFun "degree"
#LIN Fre degree_Fun = mkFun (mkN "degré" masculine)
#LIN Swe degree_Fun = mkFun (mkN "grad" "grader")

#LIN Eng is_root_Relnoun = mkN2 (mkN "root")
#LIN Fre is_root_Relnoun = mkN2 (mkN "racine") genitive
#LIN Swe is_root_Relnoun = mkN2 (mkN "rot" "rötter")

#LIN Eng cardinality_Fun = mkFun "cardinality"
#LIN Fre cardinality_Fun = mkFun "cardinalité"
#LIN Swe cardinality_Fun = mkFun (mkN "kardinalitet" "kardinaliteter")

#LIN Eng denumerable_Adj = mkAdj "denumerable"
#LIN Fre denumerable_Adj = mkAdj "dénombrable"
#LIN Swe denumerable_Adj = mkAdj "upräknelig"

#LIN Eng vector_Noun = mkNoun "vector"
#LIN Fre vector_Noun = mkNoun "vecteur"
#LIN Swe vector_Noun = mkNoun (mkN "vektor" "vektorer")

#LIN Eng length_Oper = mkOper L.length_Oper "length"
#LIN Fre length_Oper = mkOper L.length_Oper "norme"
#LIN Swe length_Oper = mkOper L.length_Oper (mkN "norm" "normer")

#LIN Eng perpendicular_Compar = mkCompar L.perpendicular_Compar "perpendicular" "to"
#LIN Fre perpendicular_Compar = mkCompar L.perpendicular_Compar (mkA "perpendiculaire") dative
#LIN Swe perpendicular_Compar = mkCompar L.perpendicular_Compar "vinkelrät" "mot"

#LIN Eng resultant_Oper = mkOper L.plus_Oper "sum"
#LIN Fre resultant_Oper = mkOper L.plus_Oper (mkN "addition")
#LIN Swe resultant_Oper = mkOper L.plus_Oper (mkN "resultant" "resultanter")

#LIN Eng square_Oper = mkOper L.square_Oper "square"
#LIN Fre square_Oper = mkOper L.square_Oper (mkN "carré" masculine)
#LIN Swe square_Oper = mkOper L.square_Oper (mkN "kvadrat" "kvadrater")

#LIN Eng legendre_symbol_Oper = mkOper L.legendre_symbol_Oper "Legendre symbol"
#LIN Fre legendre_symbol_Oper = mkOper L.legendre_symbol_Oper (mkCN (mkN "symbole" masculine) (SyntaxFre.mkAdv genitive (mkNP (mkPN "Legendre"))))
#LIN Swe legendre_symbol_Oper = mkOper L.legendre_symbol_Oper (mkN "Legendresymbol" "Legendresymboler")

pi NEW top100 Const pi_Const
#LIN Eng pi_Const = mkConst "\\pi" (mkNP the_Det (mkCN (mkN "number") (symb "\\(\\pi\\)")))
#LIN Fre pi_Const = mkConst "\\pi" (mkNP the_Det (mkCN nombre_N (symb "\\(\\pi\\)")))
#LIN Swe pi_Const = mkConst "\\pi" (mkNP the_Det (mkCN tal_N (symb "\\(\\pi\\)")))

Circle NEW top100 Noun circle_Noun
#LIN Eng circle_Noun = mkNoun "circle"
#LIN Fre circle_Noun = mkNoun (mkN "cercle" masculine)
#LIN Swe circle_Noun = mkNoun (mkN "cirkel" "cirklar")

radius NEW top100 Fun radius_Fun
#LIN Eng radius_Fun = mkFun "radius"
#LIN Fre radius_Fun = mkFun "rayon"
#LIN Swe radius_Fun = mkFun "radie"

area NEW top100 Fun area_Fun
#LIN Eng area_Fun = mkFun "area"
#LIN Fre area_Fun = mkFun "aire"
#LIN Swe area_Fun = mkFun "area"


#CONV Agda forall all
#CONV Agda Type Set

#CONV Lean forall All
#CONV Lean exists Exist

#CONV Coq forall All
#CONV Coq exists Exist
#CONV Coq Nat nat
#CONV Coq _ x_


