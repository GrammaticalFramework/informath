module MkConstants where

-- build a lexicon extension from a configuration file
-- that annotates Dedukti constants with information for GF
-- Usage:
--
--  RunInformath <file>.dkgf
--  make Informath.pgf
--
-- the format of an annotation is
--
--   <dkid> NEW <project> <gfcat> <gfid> <int>* = <gfexp>
--
-- E.g.
--
--   Polynomial NEW top100 Noun polynomial_Noun = mkNoun "polynomial"
--
-- from which it generates lines in three files
--
--   UserConstants.gf             :  fun <gfid> : <gfcat> ; -- <project>
--   grammars/UserConstantsEng.gf :  lin <gfid> = <gfexp> ; -- <project>
--
-- Annotations are written in the file constant_data.dkgf.
-- For the time being, it is a global file

import PGF

import Data.List (intersperse)

constantsFile langid = "grammars/UserConstants" ++ langid ++ ".gf"

mkConstants :: Language -> FilePath -> IO ()
mkConstants lang file = do
  let langid = case showCId lang of
        cncname -> drop (length cncname - 3) cncname
  rawannots <- readFile file >>= return . map words . filter (elem '=') . lines
  let annots = [if head w == '(' then ww else ws | ws@(w:ww) <- rawannots] -- remove (freq)
  let parts = map (break (== "=")) annots
  let dkannots = [fun:cat:proj:ws | (_:_:proj:cat:fun:_, _:ws)  <- parts]
  writeAndReport (constantsFile langid) $ mkConstantsCncGF langid dkannots
  writeAndReport (constantsFile "") $ mkConstantsGF dkannots


mkConstantsGF annots = unlines $ [
  "abstract UserConstants = BaseConstants ** {",
  "",
  "-- generated by MkConstants.hs",
  ""
  ] ++
  map mkConstant annots ++
  ["}"]
 where
   mkConstant (fun:cat:proj:_) =
     unwords(["fun", fun, ":", cat, ";", "--", proj])


mkConstantsCncGF lang annots = unlines $ [
  "concrete UserConstants" ++ lang ++ " of UserConstants = BaseConstants" ++ lang ++ " **",
  "",
  "-- generated by MkConstants.hs",
  "",
  "open",
  "  Utilities" ++ lang ++ ",",
  "  Syntax" ++ lang ++ ",",
  "  Paradigms" ++ lang ++ ",",
  "  Symbolic" ++ lang ++ ",",
  "  (L=BaseConstantsLatex),",
  "  Formal",
  "",
  "in {"
  ] ++
  map mkConstant annots ++
  ["}"]
 where
   mkConstant (fun:cat:proj:ws) = 
     unwords(["lin", fun, "=", unwords ws, ";", "--", proj])

writeAndReport :: FilePath -> String -> IO ()
writeAndReport file s = do
  writeFile file s
  putStrLn $ "wrote " ++ file

