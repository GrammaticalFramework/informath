
Thm01 : (m : Elem Nat) -> (n : Elem Nat) -> Proof (Neq n 0) ->
  Proof (Neq (pow (div m n) 2) 2).
Thm01a : (m : Elem Nat) -> (n : Elem Nat) ->
  Proof (Neq (pow (div m (plus n 1)) 2) 2).
Thm01b : (q : Elem Rat) -> Proof (Neq (pow q 2) 2).
Thm01c : (q : Elem Rat) -> Proof (Neq (sqrt 2) q).

def rational : Elem Real -> Prop :=
  x => exists Int (p => exists Int (q => and (Neq q 0) (Eq x (div p q)))).
Thm01d : Proof (not (rational (sqrt 2))).

def irrational : Elem Real -> Prop := x => not (rational x).
Thm01e : Proof (irrational (sqrt 2)).

Polynomial : Type.
degree : (P : Polynomial) -> Elem Nat.
isRoot : (c : Elem Complex) -> (P : Polynomial) -> Prop. 
Thm02 : (P : Polynomial) -> Proof (Gt (degree P) 0) ->
  Proof (exists Complex (c => isRoot c P)).

cardinality : (A : Set) -> Elem Cardinal.
def denumerable : (A : Set) -> Prop := A => Eq (cardinality A) (cardinality Nat).
Thm03 : Proof (denumerable Rat).
Thm03a : Proof (Eq (cardinality Nat) (cardinality Rat)).

Vector : Set.
length : Elem Vector -> Elem Real.
perpendicular : Elem Vector -> Elem Vector -> Prop.
resultant : Elem Vector -> Elem Vector -> Elem Vector.
def square : Elem Real -> Elem Real := x => pow x 2.
Thm04 : (u : Elem Vector) -> (v : Elem Vector) -> Proof (perpendicular u v) ->
  Proof (Eq (length (resultant u v)) (sqrt (plus (square (length u)) (square (length v))))).

legendre : Elem Nat -> Elem Nat -> Elem Int.
thm07 : (p : Elem Nat) -> (q : Elem Nat) -> Proof (and (prime p) (prime q)) ->
  Proof (Eq (times (legendre p q) (legendre q p)) (pow (neg 1) (times (div (minus p 1) 2) (div (minus q 1) 2)))).

pi : Elem Real.
Circle : Type.
radius : Circle -> Elem Real.
def area : Circle -> Elem Real.
thm09 : (c : Circle) -> (r : Elem Real) -> Proof (Eq r (radius c)) ->
  Proof (Eq (area c) (times pi (pow r 2))).

thm10FermatLittle : (p : Elem Nat) -> Proof (prime p) -> (a : Elem Int) ->
  Proof (exists Int (q => Eq (minus (pow a p) a) (times p q))).

thm11 : (n : Elem Nat) -> Proof (exists Nat (p => and (Geq p n) (prime p))).

thm19 : (n : Elem Nat) -> Proof (exists Nat (a => exists Nat (b => exists Nat (c => exists Nat (d =>
  Eq n (plus (plus (plus (square a) (square b)) (square c)) (square d))))))).
  
thm20a : (p : Elem Nat) -> Proof (prime p) -> (k : Elem Nat) -> Proof (Eq p (plus (times 4 k) 1))
  -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (square x) (square y))))).

thm20b : (p : Elem Nat) -> Proof (prime p) -> Proof (congruent p 1 4)
  -> Proof (exists Nat (x => exists Nat (y => Eq p (plus (square x) (square y))))).

thm22 : Proof (not (denumerable Real)).

thm51wilson : (n : Elem Nat) -> Proof (iff (prime n) (congruent (factorial (minus n 1)) (neg 1)  n)).
thm51b : (n : Elem Nat) -> Proof (iff (prime n) (divisible (plus (factorial (minus n 1)) 1) n)).

thm52 : (A : Set) -> Proof (finite A) -> Proof (Eq (cardinality (powerset A)) (pow 2 (cardinality A))).
