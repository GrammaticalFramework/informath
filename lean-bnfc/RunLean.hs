-- File generated by the BNF Converter (bnfc 2.9.5).

-- | Program to test parser.

module Main where

import Prelude
import System.Environment ( getArgs )
import System.Exit        ( exitFailure )
import Control.Monad      ( when )

import AbsLean    ()
import LayoutLean ( resolveLayout )
import LexLean    ( Token, mkPosToken )
import ParLean    ( pCode, myLexer )
import PrintLean  ( Print, printTree )
import SkelLean   ()

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile :: (Print a, Show a) => Verbosity -> ParseFun a -> FilePath -> IO ()
runFile v p f = putStrLn f >> readFile f >>= run v p

run v p = mapM_ (runLine v p) . filter (isTheorem . snd) . zip [1..] . lines
  where
    isTheorem s = let ws = words s in head ws == "theorem" && last ws == "sorry" 

runLine :: (Print a, Show a) => Verbosity -> ParseFun a -> (Int, String) -> IO ()
runLine v p (n, s) =
  case p ts of
    Left err -> do
      putStrLn (show n ++ ": " ++ err)
    Right tree -> do
      showTree v tree
  where
  ts = resolveLayout True $ myLexer s
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree = do
  putStrV v $ show tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Parse stdin verbosely."
    , "  (files)         Parse content of files verbosely."
    , "  -s (files)      Silent mode. Parse content of files silently."
    ]

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    []         -> getContents >>= run 2 pCode
    "-s":fs    -> mapM_ (runFile 0 pCode) fs
    fs         -> mapM_ (runFile 2 pCode) fs

