entrypoints Code, Stm, Exp ;

layout toplevel ;
layout "do", "where", "by" ;

LeanCode. Code ::= [Cmd] ;

comment "/-" "-/" ;
comment "--" ;

CEval.  Cmd ::= "#eval" Exp ;
CCheck. Cmd ::= "#check" Exp ;

COpenIn.  Stm ::= "open" Name Opens "in" Cmd ;
COpen.    Stm ::= "open" Name Opens ;
CStm. Cmd ::= Stm ;

terminator Cmd ";" ;

NoOpens. Opens ::= ;
IdOpens. Opens ::= "(" [Exp] ")" ;

SImport.    Stm ::= "import" Name ;
SUniverse.  Stm ::= "universe" [Var] ;
SNamespace. Stm ::= "namespace" Id ;
SSection.   Stm ::= "section" ;
SEnd.       Stm ::= "end" ;
SEndName.   Stm ::= "end" Name ;
SVariable.  Stm ::= "variable" [VarDecl] ;
SDef.       Stm ::= DefMode "def" Def ;
SAbbrev.    Stm ::= DefMode "abbrev" Def ; --- is it so general?
SInductive. Stm ::= "inductive" Name [VarDecl] Annot "where" "{" [Constr] "}" Deriv ;
SInductiveEq. Stm ::= "inductive" Name ":=" [Constr] Deriv ;
---SInductiveBare. Stm ::= "inductive" Name [Constr] Deriv ;
STheorem.   Stm ::= "theorem" Name [VarDecl] ":" Exp ":=" Exp ;
SExample.   Stm ::= "example" [VarDecl] ":" Exp ":=" Exp ;
---SWhere.     Stm ::= Stm "where" [Def] ;
SStruct.    Stm ::= "structure" Id [VarDecl] Annot "where" "{" [Typing] "}" Deriv ;
SClass.     Stm ::= "class" Id [VarDecl] "where" "{" [Typing] "}" ;
SInstance.  Stm ::= "instance" ":" Id Id "where" "{" [Instdef] "}" ;


--- terminator Stm ";" ;

DTyped.    Def ::= Name [VarDecl] ":" Exp ":=" Exp ;
DNotype.   Def ::= Name [VarDecl] ":=" Exp ;
DCases.    Def ::= Name [VarDecl] ":" Exp "|" [Case] ;

terminator nonempty Def "" ;

CBranch. Case ::= [Exp] "=>" Exp ;
separator Case "|" ;

CTyped.  Constr ::= "|" [Exp] ":" Exp ;
CExps.   Constr ::= "|" [Exp] ;
CApp.    Constr ::= "|" Id "(" [Var] ":" Exp ")" ":" Exp ;
separator Constr ";" ;

DNone.  Deriv ::= ;
DDeriv. Deriv ::= "deriving" [Exp] ;

DMNone. DefMode ::= ;
DMnoncomputable. DefMode ::= "noncomputable" ;
DMpartial. DefMode ::= "partial" ;
DMprotected. DefMode ::= "protected" ;

VDTyped.  VarDecl ::= "(" [Var] ":" Exp ")" ;
VDImplTyped.  VarDecl ::= "{" [Var] ":" Exp "}" ;
VDList.   VarDecl ::= "[" [Var] "]" ;
VDVar.    VarDecl ::= Var ;

terminator Var "" ;
terminator VarDecl "" ;

VId.  Var ::= Id ;
---VOpt. Var ::= Id "?" ;

TConstr. Typing ::= Id "::" ; --- should be the first field in struct
TTyping. Typing ::= Id ":" Exp ;

separator Typing ";" ;

IDef. Instdef ::= Id ":=" Exp ;
separator Instdef ";" ;

NExp.   Name ::= Exp15 ;

ETyped. Exp16 ::= "(" Exp ":" Exp ")" ;
EInt.   Exp16 ::= Integer ;
EDouble. Exp16 ::= Double ;
EStr.   Exp16 ::= String ;
EVar.   Exp16 ::= Var ;
ETuple. Exp16 ::= "(" [Exp] ")" ;
EList.  Exp16 ::= "[" [Exp] "]" ;
EBrace. Exp16 ::= "{" [Exp] "}" ;
EAngle. Exp16 ::= "⟨" [Exp] "⟩" ;
EStruct. Exp16 ::= "{" [Field] Annot "}" ;
EUpdate. Exp16 ::= "{" Exp "with" [Field] Annot "}" ;
EUnit.  Exp16 ::= "(" ")" ;
ENil.   Exp16 ::= "[" "]" ;
ERange. Exp16 ::= "[" Exp ":" Exp "]" ;
EDot.   Exp16 ::= "·" ; --- used only in parentheses? 1.7

EBang.   Exp15 ::= "s!" String ;
EQual.   Exp15 ::= Exp15 "." Exp16 ;

---ESyntax. Exp14 ::= Id "!" "{" Exp "}" ;

EApp.   Exp13 ::= Exp13 Arg ;

ENeg.   Exp12 ::= "¬" Exp12 ;
ENot.   Exp12 ::= "!" Exp12 ;
EMinus. Exp12 ::= "-" Exp13 ;
EExp.   Exp12 ::= Exp12 "^" Exp13 ;
EMul.   Exp11 ::= Exp11 "*" Exp12 ;
EDiv.   Exp11 ::= Exp11 "/" Exp12 ;
ERem.   Exp11 ::= Exp11 "%" Exp12 ;
EAdd.   Exp10 ::= Exp10 "+" Exp11 ;
ESub.   Exp10 ::= Exp10 "-" Exp11 ;
ECons.  Exp10 ::= Exp10 "::" Exp11 ;
EEq.    Exp9 ::= Exp10 "=" Exp10 ;
ELt.    Exp9 ::= Exp10 "<" Exp10 ;
EGt.    Exp9 ::= Exp10 ">" Exp10 ;
ELe.    Exp9 ::= Exp10 "≤" Exp10 ;
EGe.    Exp9 ::= Exp10 "≥" Exp10 ;
ENeq.   Exp9 ::= Exp10 "≠" Exp10 ;
EConj.  Exp8 ::= Exp8 "∧" Exp9 ;
EAnd.   Exp8 ::= Exp8 "&&" Exp9 ;
EProd.  Exp8 ::= Exp9 "×" Exp8 ;  -- right associative, lean-lang 1.6
ESum.   Exp8 ::= Exp9 "⊕" Exp8 ;  --- right associative?
EDisj.  Exp7 ::= Exp7 "∨" Exp8 ;
EOr.    Exp7 ::= Exp7 "||" Exp8 ;
EImpl.  Exp4 ::= Exp5 "→" Exp4 ;

EFun.   Exp2 ::= Fun [VarDecl] Annot Fundef ; --- overgenerating?

FFun.    Fun ::= "fun" ;
FLambda. Fun ::= "λ" ; -- less common, acc. to 1.7

ELet.   Exp1 ::= "let" Exp Annot Locdef ; ---- layout divides Locdef into two parts
ELetrec. Exp1 ::= "let" "rec" Exp Annot Locdef ;

EOpen.  Exp1 ::= "open" Id "in" Exp2 ;

EUniv.      Exp1 ::= "∀" [VarDecl] "," Exp1 ;
EUnivVars.  Exp1 ::= "∀" [Var] ":" Exp1 "," Exp1 ;

EExist.      Exp1 ::= "∃" [VarDecl] "," Exp1 ;
EExistVars.  Exp1 ::= "∃" [Var] ":" Exp1 "," Exp1 ;

EMatch. Exp1 ::= "match" [Exp] "with" "|" [Case] ;

EIfThenElse. Exp ::= "if" Exp1 "then" Exp1 "else" Exp ;

EIfLetThenElse. Exp ::= "if" "let" Exp Annot Locdef "then" Exp1 "else" Exp ;

EByTactic. Exp ::= "by" "{" [Tactic] "}" ;

EDo. Exp ::= "do" "{" [Command] "}" ;

coercions Exp 16 ;
separator nonempty Exp "," ;

AAss. Arg ::= "(" Field ")" ;
AExp. Arg ::= Exp14 ;

FAss. Field ::= Id ":=" Exp ;
separator Field "," ;

LExp.   Locdef ::= ":=" Exp2 ;
LMatch. Locdef ::= "|" [Case] ;

FExp.   Fundef ::= "=>" Exp1 ;
FMatch. Fundef ::= "|" [Case] ;

TExp. Tactic ::= Exp1 ;
separator Tactic ";" ;

ANone. Annot ::= ;
AType. Annot ::= ":" Exp ;

CAss.  Command ::= Var [Var] ":=" Exp1 ";" ;
CFor.  Command ::= "for" Var "in" Exp1 "do" [Command] ;
CExp.  Command ::= Exp1 ";" ; ---- precedence?

terminator nonempty Command "" ; ---- newline

token Id ((letter | ["_αβℕℚℝℤ"]) (letter | digit | '_' | '\'' | '?')*) ;
