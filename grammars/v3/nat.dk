Conj : Type -> Type -> Type.
Disj : Type -> Type -> Type.
Impl : Type -> Type -> Type.
Nat : Type.
Zero : Nat.
Succ : (x : Nat) -> Nat.
sum : (x : Nat) -> (y : Nat) -> Nat.
gcd : (x : Nat) -> (y : Nat) -> Nat.
Eq : (x : Nat) -> (y : Nat) -> Type.
Lt : (x : Nat) -> (y : Nat) -> Type.
Gt : (x : Nat) -> (y : Nat) -> Type.
Even : (x : Nat) -> Type.
Odd : (x : Nat) -> Type.
Prime : (x : Nat) -> Type.


thm eqSumZero : (x : Nat) -> Eq (sum x Zero) x := circular.
thm eqSumSucc : (x : Nat) -> (y : Nat) -> Eq (sum x (Succ y)) (Succ (sum x y)) := circular.
thm gcdLt : (x : Nat) -> (y : Nat) -> Lt x y -> Lt (gcd x y) y := circular.

thm evenOdd : (x : Nat) -> Disj (Even x) (Odd x) := circular.
thm primeOdd : (x : Nat) -> Impl (Prime x) (Disj (Odd x) (Gt x (Succ (Succ Zero)))) := circular.