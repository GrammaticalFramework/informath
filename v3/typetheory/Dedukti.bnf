entrypoints Module, Jmt, Exp ;

MJmts. Module ::= [Jmt] ;

terminator Jmt "" ;

comment "(;" ";)" ;
comment "#" ; ----

JStatic.  Jmt ::= QIdent ":" Exp "." ;
JDef.     Jmt ::= "def" QIdent MTyp MExp "." ;
JInj.     Jmt ::= "inj" QIdent MTyp MExp "." ;
JThm.     Jmt ::= "thm" QIdent MTyp MExp "." ;
JRules.   Jmt ::= [Rule] "." ;

RRule.  Rule ::= "[" [QIdent] "]" Patt "-->" Exp ;
separator nonempty Rule "" ;

separator QIdent "," ;

MTNone. MTyp ::= ;
MTExp.  MTyp ::= ":" Exp ;

MENone. MExp ::= ;
MEExp.  MExp ::= ":=" Exp ;

EIdent.  Exp9 ::= QIdent ;
EApp.    Exp5 ::= Exp5 Exp6 ;
EAbs.    Exp2 ::= Bind "=>" Exp2 ;
EFun.    Exp1 ::= Hypo "->" Exp1 ;

coercions Exp 9 ;

BVar.   Bind ::= Var ;
BTyped. Bind ::= Var ":" Exp3 ;

VIdent.  Var ::= QIdent ;
VWild.   Var ::= "_" ;

HExp.    Hypo ::= Exp3 ;
HVarExp. Hypo ::= Var ":" Exp3 ;
HParVarExp. Hypo ::= "(" Var ":" Exp ")" ;

PVar.   Patt3 ::= Var ;
PBracket. Patt3 ::= "{" Patt "}" ;
PApp.   Patt1 ::= Patt1 Patt2 ;
PBind.  Patt  ::= Bind "=>" Patt1 ;

coercions Patt 3 ;

token QIdent (letter | digit | '_' | '!' | '?' | '\'')+ ('.' (letter | digit | '_' | '!' | '?' | '\'')+)? ;

-- approximating
-- https://github.com/Deducteam/Dedukti/blob/3dbbffdb5c8af3be15bb2c7a59ba263505c3a360/parsing/lexer.mll#L25
-- ['a'-'z' 'A'-'Z' '0'-'9' '_' '!' '?']['a'-'z' 'A'-'Z' '0'-'9' '_' '!' '?' '\'' ]*

