entrypoints Code, Stm, Exp ;

layout toplevel ;
layout "do" ;

LeanCode. Code ::= [Stm] ;

comment "/-" "-/" ;
comment "--" ;
comment "#" ;

SImport.    Stm ::= "import" Name ;
SUniverse.  Stm ::= "universe" [Var] ;
SNamespace. Stm ::= "namespace" Id ;
SSection.   Stm ::= "section" ;
SOpen.      Stm ::= "open" Name ;
SEnd.       Stm ::= "end" ;
SEndName.   Stm ::= "end" Name ;
SVariable.  Stm ::= "variable" [VarDecl] ;
SDef.       Stm ::= DefMode "def" Def ;
SInductive. Stm ::= "inductive" Name "|" [Constr] Deriv ;
SInductiveEq. Stm ::= "inductive" Name ":=" "|" [Constr] Deriv ;
STheorem.   Stm ::= "theorem" Name [VarDecl] ":" Exp ":=" Exp ;
SWhere.     Stm ::= Stm "where" [Def] ;

terminator Stm ";" ;

DTyped.    Def ::= Name [VarDecl] ":" Exp ":=" Exp ;
DNotype.   Def ::= Name [VarDecl] ":=" Exp ;
DCases.    Def ::= Name [VarDecl] ":" Exp "|" [Case] ;

terminator nonempty Def "" ;

CBranch. Case ::= [Exp] "=>" Exp ;
separator Case "|" ;

CConstr. Constr ::= [Exp] ":" Exp ;
CApp.    Constr ::= Id "(" [Var] ":" Exp ")" ":" Exp ;
separator Constr "|" ;

DNone.  Deriv ::= ;
DDeriv. Deriv ::= "deriving" [Exp] ;

DMNone. DefMode ::= ;
DMnoncomputable. DefMode ::= "noncomputable" ;
DMpartial. DefMode ::= "partial" ;
DMprotected. DefMode ::= "protected" ;

VDTyped.  VarDecl ::= "(" [Var] ":" Exp ")" ;
VDList.   VarDecl ::= "[" [Var] "]" ;
VDVar.    VarDecl ::= Var ;

terminator Var "" ;
terminator VarDecl "" ;

VId. Var ::= Id ;
VOpt.   Var ::= Id "?" ;

NExp.   Name ::= Exp15 ;

EInt.   Exp16 ::= Integer ;
EStr.   Exp16 ::= String ;
EVar.   Exp16 ::= Var ;
ETuple. Exp16 ::= "(" [Exp] ")" ;
EList.  Exp16 ::= "[" [Exp] "]" ;
EBrace. Exp16 ::= "{" [Exp] "}" ;
EUnit.  Exp16 ::= "(" ")" ;
ENil.   Exp16 ::= "[" "]" ;
ERange. Exp16 ::= "[" Exp ":" Exp "]" ;

EBang.   Exp15 ::= Exp16 "!" Exp16 ; --- ?
EQual.   Exp15 ::= Exp15 "." Exp16 ;

---ESyntax. Exp14 ::= Id "!" "{" Exp "}" ;

EApp.   Exp13 ::= Exp13 Exp14 ;

ENeg.   Exp12 ::= "¬" Exp12 ;
ENot.   Exp12 ::= "!" Exp12 ;
EExp.   Exp12 ::= Exp12 "^" Exp13 ;
EMul.   Exp11 ::= Exp11 "*" Exp12 ;
EDiv.   Exp11 ::= Exp11 "/" Exp12 ;
ERem.   Exp11 ::= Exp11 "%" Exp12 ;
EAdd.   Exp10 ::= Exp10 "+" Exp11 ;
ESub.   Exp10 ::= Exp10 "-" Exp11 ;
ECons.  Exp10 ::= Exp10 "::" Exp11 ;
EEq.    Exp9 ::= Exp10 "=" Exp10 ;
EGt.    Exp9 ::= Exp10 ">" Exp10 ;
ENeq.   Exp9 ::= Exp10 "≠" Exp10 ;
EConj.  Exp8 ::= Exp8 "∧" Exp9 ;
EAnd.   Exp8 ::= Exp8 "&&" Exp9 ;
ECross. Exp8 ::= Exp8 "×" Exp9 ;
EDisj.  Exp7 ::= Exp7 "∨" Exp8 ;
EOr.    Exp7 ::= Exp7 "||" Exp8 ;
EImpl.  Exp4 ::= Exp5 "→" Exp4 ;

EFun.   Exp2 ::= "fun" [Var] ":" Exp "=>" Exp3 ;

ELet.   Exp1 ::= "let" Id [Var] ":=" Exp2 ; ---- layout divides Exp2 into two parts

EUniv.  Exp1 ::= "∀" [Var] ":" Exp "," Exp1 ;

EMatch. Exp ::= "match" Exp "with" "|" [Case] ;

EIfThenElse. Exp ::= "if" Exp1 "then" Exp1 "else" Exp ;

EDo. Exp ::= "do" "{" [Command] "}" ;

coercions Exp 16 ;

separator nonempty Exp "," ;


CAss.  Command ::= Var [Var] ":=" Exp1 ";" ;
CFor.  Command ::= "for" Var "in" Exp1 "do" [Command] ;
CExp.  Command ::= Exp1 ";" ; ---- precedence?

terminator nonempty Command "" ; ---- newline

token Id ((letter | ["_α"]) (letter | digit | '_' | '\'')*) ;
