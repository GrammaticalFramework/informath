entrypoints Code, Stm, Exp ;

layout toplevel ;
layout "do" ;

LeanCode. Code ::= [Stm] ;

comment "/-" "-/" ;
comment "#" ;

SImport.    Stm ::= "import" Name ;
SUniverse.  Stm ::= "universe" [Var] ;
SNamespace. Stm ::= "namespace" Id ;
SSection.   Stm ::= "section" ;
SOpen.      Stm ::= "open" Name ;
SEnd.       Stm ::= "end" ;
SEndName.   Stm ::= "end" Name ;
SVariable.  Stm ::= "variable" [VarDecl] ;
SDef.       Stm ::= DefMode "def" Id [VarDecl] ":" Exp ":=" Exp ;
SDefNotype. Stm ::= DefMode "def" Id [VarDecl] ":=" Exp ;
SDefCases.  Stm ::= DefMode "def" Id [VarDecl] ":" Exp "|" [Case] ;
SInductive. Stm ::= "inductive" Id "|" [Constr] Deriv ;
STheorem.   Stm ::= "theorem" Id [VarDecl] ":" Exp ":=" Exp ;

terminator Stm ";" ;

CBranch. Case ::= [Exp] "=>" Exp ;
separator Case "|" ;

CConstr. Constr ::= [Exp] ":" Exp ;
separator Constr "|" ;

DNone.  Deriv ::= ;
DDeriv. Deriv ::= "deriving" [Exp] ;

DMNone. DefMode ::= ;
DMnoncomputable. DefMode ::= "noncomputable" ;
DMpartial. DefMode ::= "partial" ;
DMprotected. DefMode ::= "protected" ;

VDTyped.  VarDecl ::= "(" [Var] ":" Exp ")" ;
VDList.   VarDecl ::= "[" [Var] "]" ;
VDVar.    VarDecl ::= Var ;

terminator Var "" ;
terminator VarDecl "" ;

VId. Var ::= Id ;
VOpt.   Var ::= Id "?" ;

NExp.   Name ::= Exp10 ;

EInt.   Exp11 ::= Integer ;
EStr.   Exp11 ::= String ;
EVar.   Exp11 ::= Var ;
ETuple. Exp11 ::= "(" [Exp] ")" ;
EList.  Exp11 ::= "[" [Exp] "]" ;
EUnit.  Exp11 ::= "(" ")" ;
ENil.   Exp11 ::= "[" "]" ;
ERange. Exp11 ::= "[" Exp ":" Exp "]" ;

EBang.  Exp11 ::= "s!" String ; --- ?

EQual.  Exp9 ::= Exp9 "." Exp10 ;

EApp.   Exp8 ::= Exp8 Exp9 ;

EExp.   Exp7 ::= Exp7 "^" Exp8 ;
EMul.   Exp6 ::= Exp6 "*" Exp7 ;
EDiv.   Exp6 ::= Exp6 "/" Exp7 ;
ERem.   Exp6 ::= Exp6 "%" Exp7 ;
EAdd.   Exp5 ::= Exp5 "+" Exp6 ;
ECons.  Exp5 ::= Exp5 "::" Exp6 ;
EEq.    Exp4 ::= Exp5 "=" Exp5 ;
EGt.    Exp4 ::= Exp5 ">" Exp5 ;
ENeq.   Exp4 ::= Exp5 "≠" Exp5 ;
EAnd.   Exp3 ::= Exp3 "∧" Exp4 ;
ECross. Exp3 ::= Exp3 "×" Exp4 ;
EImpl.  Exp2 ::= Exp3 "→" Exp2 ;

ELet.   Exp1 ::= "let" Id ":=" Exp2 ; ---- layout divides Exp2 into two parts

EUniv.  Exp1 ::= "∀" [Var] ":" Exp "," Exp1 ;

EMatch. Exp ::= "match" Exp "with" "|" [Case] ;

EIfThenElse. Exp ::= "if" Exp1 "then" Exp1 "else" Exp ;

EDo. Exp ::= "do" "{" [Command] "}" ;

coercions Exp 11 ;

separator nonempty Exp "," ;


CAss.  Command ::= Var [Var] ":=" Exp1 ";" ;
CLet.  Command ::= "let" Var [Var] ":=" Exp1 ";" ;
CFor.  Command ::= "for" Var "in" Exp1 "do" [Command] ;
CExp.  Command ::= Exp1 ";" ; ---- precedence?

terminator nonempty Command "" ; ---- newline

token Id ((letter | ["_α"]) (letter | digit | '_' | '\'')*) ;
